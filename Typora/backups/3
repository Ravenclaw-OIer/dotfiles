# POJ 3580 代码分析
## `struct node`
### `node* getnew(node* w)`
新建节点。
`w`: 指定新节点挂的位置。
返回指向新的点的指针
主要通过预先分配好一定内存，并在不够时自动扩充 $10000$ 个来减少常数。
### `void down()` 和 `void update()`
分别是标记的下放和信息的拉取
操作方式与线段树对应操作类似
## `struct Treap`
### `Treap()`
构造新的 Treap
唯一功能是将根节点指向 `NULL`
### `void ins(node*, int, int)`
在 Treap 中插入新的节点。
`node* p`：新节点的根节点。实际上，初次调用时总被设为`root`
`int a`：新节点的序列中位置
`int k`：新节点的值
首先判断节点 $p$ 是否存在，若否创建之。
否则，首先将信息下放，再分类讨论：
- 如果 $\operatorname{sz}(l_p) \ge a$，则 $a$ 包含在左边，递归向左插入
- 否则就递归向右插入
每次实际操作指针之前都进行`down`，之后都进行`update`，下同。
### `void merge(node*, node*, node*)`
与 Treap 模板基本相同。
### `void del(node*, int)`
删除一个节点
`node *&p`：要删除的节点的根节点。实际上，初次调用时总被设为`root`
`int a`：要删除的节点的序列位置
思路和`ins`较为类似。首先判断 $a$ 和当前节点的关系
- 如果正好是当前节点，则删除此节点，将其左右儿子直接相连，并释放占用的空间。
- 否则，依据位置关系向左或者向右递归
### `void cut(node*, node*, node*, int)`
在指定位置把Treap切开
与模板中的`split`基本相同
### `int ask(node*, int, int)`
询问指定区间的最小值。
通过当前点和所在树上位置（及size值）判断向左还是向右，每次递归保留答案取 $\min$ 即可。
## `void Revolve(int, int, int)`
旋转操作。
将要旋转的序列切开，重排后粘回去即可。
分别切出来的是 $a, b-a+1$ 和 $c-b$。粘上去的时候需要改变一下顺序。（这边细节容易错）
## `void Reverse(int, int)`
翻转操作。
实现原理和旋转类似，与 SGU187 相同。
## `void Add(int, int, int)`
区间加操作。
直接切出来加上后再粘回去就可以了

